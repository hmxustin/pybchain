"""
–û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–ª–∞—Å—Å Message (—Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –æ–ø–∏—Å–∞–Ω–Ω—ã–º –≤ wiki: https://github.com/hmxustin/pybchain/wiki/Message)
"""

from enum import Enum
from typing import Union
from dataclasses import dataclass

# region –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

BITS_IN_BYTE = 8
""" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤ –≤ –±–∞–π—Ç–µ """

MIN_LENGTH = 0
""" –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∏—Ç–∞—Ö """

MAX_LENGTH_IN_BITS = 8_589_934_592
""" –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∏—Ç–∞—Ö """

MAX_LENGTH = MAX_LENGTH_IN_BITS // BITS_IN_BYTE
""" –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö (–≤—Å—ë-—Ç–∞–∫–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö) """

LENGTH_SIZE = 64
""" –†–∞–∑–º–µ—Ä –≤ –±–∏—Ç–∞—Ö —Å–ª–æ–≤–∞ (QWord), –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–≥–æ —Å–æ–±–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∏—Ç–∞—Ö """

DEF_ENCODING = 'utf-8'
""" –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é """

DEF_METHOD = 'sha256'
""" –ú–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é """

EMPTY_MESSAGE = bytearray([])
""" –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ """

# endregion

# region –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö

E_METHOD_TYPE = 'üö® –û—à–∏–±–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö {} –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ "Method"'
""" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è """

E_METHOD_NAME = 'üö® –û—à–∏–±–æ—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ {} –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–∞—è –≤ "Method.*.nme"'
""" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (—É–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É) """

E_ENCODING_TYPE = ('üö® –û—à–∏–±–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö {} –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –∫–æ–¥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (—Å–ø–æ—Å–æ–±–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö). –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ '
                   '–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ "Encoding"')
""" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ """

E_ENCODING_NAME = ('üö® –û—à–∏–±–æ—á–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ {} –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –∫–æ–¥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (—Å–ø–æ—Å–æ–±–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö). –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, '
                   '–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–∞—è –≤ "Encoding.*.nme"')
""" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (–ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É) """

E_DATA_TYPE = 'üö® –û—à–∏–±–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö {} –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤'
""" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö """

E_DATA_LENGTH = ('üö® –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö: {}) –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω–∞ '
                 '–ø—Ä–µ–≤—ã—à–∞—Ç—å {}')
""" –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö """

# endregion


@dataclass
class EncodingInfo:
    """ –°–≤–µ–¥–µ–Ω–∏—è –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö) """

    idx: int                                                          # –∏–Ω–¥–µ–∫—Å
    nme: str                                                          # –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    readable: bool                                                    # –ø—Ä–∏–∑–Ω–∞–∫ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (—Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞)


class Encoding(EncodingInfo, Enum):
    """ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø–æ—Å–æ–±–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö) """

    bnr = 100, 'bnr', False                                           # –ø—Ä–æ—Å—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –¥–ª—è —á—Ç–µ–Ω–∏—è (binary non-readable)
    bin = 200, 'bin', True                                            # –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    hex = 201, 'hex', True                                            # –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    utf8 = 300, 'utf-8', True                                         # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (—á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç)
    cp1251 = 301, 'cp1251', True                                      # –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
    cp866 = 302, 'cp866', True                                        # ... —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    koi8r = 303, 'koi8-r', True                                       # ...

    # todo –î–æ–±–∞–≤—å—Ç–µ –Ω–∏–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä = –∏–Ω–¥–µ–∫—Å, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', –ø—Ä–∏–∑–Ω–∞–∫ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏


@dataclass
class MethodInfo:
    """ –°–≤–µ–¥–µ–Ω–∏—è –æ –º–µ—Ç–æ–¥–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ hash()) """

    idx: int                                                          # –∏–Ω–¥–µ–∫—Å
    nme: str                                                          # –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    acceleration: bool                                                # –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ


class Method(MethodInfo, Enum):
    """ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è """

    sha256 = 10, 'sha-256', True                                      # –º–µ—Ç–æ–¥ sha-256 —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ CPU (Intel¬Æ SHA Extensions)

    # todo –î–æ–±–∞–≤—å—Ç–µ –Ω–∏–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä = –∏–Ω–¥–µ–∫—Å, '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', –∏–º–µ–µ—Ç –ª–∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ


TData = Union[str, bytes, bytearray]
""" –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –≤—Ö–æ–¥—è—â–∏—Ö (–∏—Å—Ö–æ–¥–Ω—ã—Ö) –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è """

TEncoding = Union[Encoding, str]
""" –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ """

TMethod = Union[Method, str]
""" –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è """


class Message:
    """ –°–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥–ª–µ–∂–∞—â–µ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é (—Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –æ–ø–∏—Å–∞–Ω–Ω–∞—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏) """

    def __init__(self, data: TData = EMPTY_MESSAGE, encoding: TEncoding = Encoding.utf8, method: TMethod = Method.sha256) -> None:
        """
        –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

        :param data: –∏—Å—Ö–æ–¥–Ω–∞—è —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        :param encoding: –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (—Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö)
        :param method: –º–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ hash()
        :return: ``None``
        """
        ...

        self._method: Method                                          # –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        self._set_method(method)                                      # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

        self._encoding: Encoding                                      # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (—Å–ø–æ—Å–æ–±–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        self._set_encoding(encoding)                                  # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

        self._data: bytearray                                         # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        self._set_data(data)                                          # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏

    def _set_method(self, method: Method) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–æ–¥–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö, –∞
        –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∞ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –µ—â–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–¥–Ω–æ–º—É –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π ENum-–∞)

        :param method: –º–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ hash()
        :return: ``None``
        """

        t = type(method)                                              # –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø

        if t is str:                                                  # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞, —Ç–æ...
            found = None                                              # ... –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            for i in Method:                                          # ... –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å—Ä–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–π EMun-–∞
                if method == i.nme:                                   # ... ... –µ—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ...
                    found = i                                         # ... ... ... —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                    break                                             # ... ... ... –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫

            if not found:                                             # ... –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Ç–æ...
                raise ValueError(E_METHOD_NAME.format(method))        # ... ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–æ—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

            self._method = found                                      # ... –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (ENum)
            return                                                    # ... –±–æ–ª—å—à–µ –Ω–∞–º —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ

        if t is Method:                                               # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª ENum, —Ç–æ...
            self._method = method                                     # ... –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (ENum)
            return                                                    # ... –±–æ–ª—å—à–µ –Ω–∞–º —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ

        raise TypeError(E_METHOD_TYPE.format(t))                      # ... –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ —Ç–∏–ø–∞)

    def _set_encoding(self, encoding: Encoding) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (—Å–ø–æ—Å–æ–±–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö). –ü–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö, –∞ –µ—Å–ª–∏
        –ø–æ—Å—Ç—É–ø–∏–ª–∞ —Å—Ç—Ä–æ–∫–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ENum-a)

        :param encoding: –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (—Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
        :return: ``None``
        """

        t = type(encoding)                                            # –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø

        if t is str:                                                  # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞, —Ç–æ...
            found = None                                              # ... –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            for i in Encoding:                                        # ... –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å—Ä–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–π EMun-–∞
                if encoding == i.nme:                                 # ... ... –µ—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ...
                    found = i                                         # ... ... ... —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                    break                                             # ... ... ... –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫

            if not found:                                             # ... –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Ç–æ...
                raise ValueError(E_ENCODING_NAME.format(encoding))    # ... ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–æ—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

            self._encoding = found                                    # ... –µ—Å–ª–∏ —É–∂ –Ω–∞—à–ª–∏, —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            return                                                    # ... –±–æ–ª—å—à–µ –Ω–∞–º —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ

        if t is Encoding:                                             # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ ENum, —Ç–æ...
            self._encoding = encoding                                 # ... –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ, –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            return                                                    # ... –±–æ–ª—å—à–µ –Ω–∞–º —Ç—É—Ç –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ

        raise TypeError(E_ENCODING_TYPE.format(t))                    # —é—é—é –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö

    def _set_data(self, data: TData) -> None:
        """
        –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏

        :param data: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ç–æ–º –≤–∏–¥–µ, –∫–∞–∫ –æ–Ω–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏)
        :return: ``None``
        """

        t = type(data)                                                # –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø

        if t not in [str, bytes, bytearray]:                          # –µ—Å–ª–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—á–µ–Ω—å, —Ç–æ ...
            raise TypeError(E_DATA_TYPE.format(t))                    # ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        actual_setters = {                                            # –ø–µ—Ä–µ—á–µ–Ω—å –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            str: self._set_data_from_str,                             # ... –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–æ–π
            bytes: self._set_data_from_bytes,                         # ... -*-*- –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–∞–π—Ç–æ–≤
            bytearray: self._set_data_from_bytearray                  # ... -*-*- –º–∞—Å—Å–∏–≤–æ–º –±–∞–π—Ç–æ–≤
        }

        setter = actual_setters[t]                                    # –≤—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—Ç–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        setter(data)                                                  # noqa –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ç—Ç–µ—Ä

    def _set_data_from_str(self, data: str) -> None:
        """
        –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏

        :param data: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
        :return: ``None``
        """

        actual_setters = {
            Encoding.bnr: self._set_data_from_str_as_utf8,
            Encoding.bin: self._set_data_from_str_as_bin,
            Encoding.hex: self._set_data_from_str_as_hex
        }

        setter = actual_setters[self._encoding]
        setter(data)                                                  # noqa –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ç—Ç–µ—Ä

    def _set_data_from_str_as_utf8(self, data: str) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—É—é —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ utf-8

        :param data: –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        :return: ``None``
        """

        ...

    def _set_data_from_str_as_bin(self, data: str) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É (—Ç–æ –µ—Å—Ç—å, —Å—Ç—Ä–æ–∫—É –∏–∑ –Ω—É–ª–µ–π, –µ–¥–∏–Ω–∏—Ü –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        (–≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã))

        :param data: –∏—Å—Ö–æ–¥–Ω–∞—è –±–∏–Ω–∞—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        :return: ``None``
        """

        ...

    def _set_data_from_str_as_hex(self, data: str) -> None:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É (—Ç–æ –µ—Å—Ç—å, —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
        —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ (–≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã))

        :param data: –∏—Å—Ö–æ–¥–Ω–∞—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        :return: ``None``
        """

        ...

    def _set_data_from_bytes(self, data: bytes) -> None:
        """
        –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–π—Ç–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏

        :param data: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –≤–∏–¥–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–π—Ç–æ–≤)
        :return: ``None``
        """

        data = bytearray(data)                                        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤
        self._set_data_from_bytearray(data)                           # –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è

    def _set_data_from_bytearray(self, data: bytearray) -> None:
        """
        –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏

        :param data: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
        :return: ``None``
        """

        ln = len(data)                                                # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ –≤ –±–∞–π—Ç–∞—Ö

        if ln > MAX_LENGTH:                                           # –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ, ...
            args = (str(ln), str(MAX_LENGTH))                         # ... —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            raise ValueError(E_DATA_LENGTH.format(*args))             # ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        self._data = data                                             # –≤—Å–µ –æ–∫ -> —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    @property
    def method(self) -> Method:
        """
        –°–≤–æ–π—Å—Ç–≤–æ: "–ú–µ—Ç–æ–¥"

        :return: –º–µ—Ç–æ–¥ (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)
        """

        return self._method                                           # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—Ä–∞–Ω–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    @method.setter
    def method(self, method: Method) -> None:
        """
        –°–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ "–ú–µ—Ç–æ–¥"

        :param method: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–ª–≥–æ—Ä–∏—Ç–º)
        :return: ``None``
        """

        self._set_method(method)                                      # –≤—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è

    @property
    def encoding(self) -> Encoding:
        """
        –°–≤–æ–π—Å—Ç–≤–æ "–ö–æ–¥–∏—Ä–æ–≤–∫–∞" (–∫–æ–¥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–ª–∏ —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö)

        :return: –∫–æ–¥–∏—Ä–æ–≤–∫–∞
        """

        return self._encoding                                         # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—Ä–∞–Ω–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    @encoding.setter
    def encoding(self, encoding) -> None:
        """
        –°–µ—Ç—Ç–µ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ "–ö–æ–¥–∏—Ä–æ–≤–∫–∞"

        :param encoding: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ (—Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
        :return: ``None``
        """
        self._set_encoding(encoding)                                  # –≤—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
