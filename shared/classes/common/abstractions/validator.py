"""
**–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä (–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)**

–í–∞–ª–∏–¥–∞—Ç–æ—Ä, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
"""

from inspect import signature
from re import search
from typing import (
    Any, Callable, Dict, List, Optional, Tuple, TypeAlias, TypeVar
)


VObject: TypeAlias = Any
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –≤–∞–ª–∏–¥–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫)
"""

Args: TypeAlias = Tuple
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∫–æ—Ä—Ç–µ–∂–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
"""

KWArgs: TypeAlias = Dict[str, Any]
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
"""

VParams: TypeAlias = Optional[KWArgs]
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –≤–∏–¥–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
"""

VMethod: TypeAlias = Callable[[Any, VParams], bool]
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –º–µ—Ç–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

VMethods: TypeAlias = List[VMethod]
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –º–µ—Ç–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

EHandler: TypeAlias = Optional[Callable[[Exception, Any], None]]
"""
–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
"""

T = TypeVar('T', bound='Validator')
"""
–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–ª—è self –≤ –∫–ª–∞—Å—Å–µ ``Validator``
"""


class ValidationError(Exception):
    """
    **–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"**

    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """

    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è


class Validator:
    """
    **–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å "–í–∞–ª–∏–¥–∞—Ç–æ—Ä"**

    –í–∞–ª–∏–¥–∞—Ç–æ—Ä, —Å–ø–æ—Å–æ–±–Ω—ã–π —Ü–∏–∫–ª–æ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –æ–±—ä–µ–∫—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏
    (``obj``) —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ (``methods``), –ø–æ–¥–Ω–∏–º–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ
    –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á
    """
    # region –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    E_NOT_LIST = ('üí• –ü–∞—Ä–∞–º–µ—Ç—Ä methods –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º (list) –º–µ—Ç–æ–¥–æ–≤ '
                  '–ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ methods ‚Äî {})')
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ ``methods`` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
    """

    E_EMPTY_LIST = ('üí• –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ '
                    '–º–µ–Ω—å—à–µ–π –º–µ—Ä–µ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏')
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ ``methods`` —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
    """

    E_NON_CALLABLE = ('üí• –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ methods –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥–æ–º ('
                      '"callable". –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ {}')
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ``methods`` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º
    """

    E_NON_CALLABLE_H = ('üí• –û–±—ä–µ–∫—Ç handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥–æ–º (callable) –∏–ª–∏ '
                        'None (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ handler ‚Äî {}')
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ``handler`` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º
    """

    E_INFO = '–û—à–∏–±–∫–∞ [üí•={}] c c–æ–æ–±—â–µ–Ω–∏–µ–º [‚úâÔ∏è="{}"]. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    """
    –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª
    """
    # endregion

    def __init__(self: T, methods: VMethods, handler: EHandler = None) -> None:
        """
        **–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞**

        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        :param methods: —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
        :param handler: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        :return: ``None``
        """
        if not isinstance(methods, list):
            tpe = type(methods)
            raise TypeError(self.E_NOT_LIST.format(tpe))

        if not methods:
            raise TypeError(self.E_EMPTY_LIST)

        for method in methods:
            if not callable(method):
                tpe = type(method)
                raise TypeError(self.E_NON_CALLABLE.format(tpe))

            sign = signature(method)
            if 'return' in sign.parameters:
                r_type = sign.parameters['return'].annotation
                if not (r_type == bool or r_type == Optional[bool]):
                    msg = (f'–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å '
                           f'–∑–Ω–∞—á–µ–Ω–∏–µ –±—É–ª–µ–≤–∞ —Ç–∏–ø–∞. –ü–æ —Ñ–∞–∫—Ç—É —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ '
                           f'–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî {r_type}')
                    raise TypeError(msg)
            else:
                raise TypeError('–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω '
                                '–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –±—É–ª–µ–≤–∞ —Ç–∏–ø–∞. '
                                '–ü–æ —Ñ–∞–∫—Ç—É –º–µ—Ç–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ '
                                '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–æ–±—â–µ')

        if handler is not None and not callable(handler):
            tpe = type(handler)
            raise TypeError(self.E_NON_CALLABLE_H.format(tpe))

        self._methods = methods
        self._handler = handler

    def validate(self: T, obj: VObject, **params: VParams) -> None:
        """
        **–ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏**

        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –ø–æ–¥–Ω—è—Ç–æ
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)

        –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –≤–∞–ª–∏–¥–∞—Ü–∏—è
        :param obj: –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        :return: ``None``
        """
        def _en(error_class: type[ValidationError]) -> str | None:
            """
            **–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –æ—à–∏–±–∫–∏**

            –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å "—á–∏—Å—Ç–æ–µ" –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏–∑
            —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç type

            :param error_class: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ type(ERROR)
            :return: —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è "—á–∏—Å—Ç–æ–µ" –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            (–Ω–∞–ø—Ä–∏–º–µ—Ä, TypeError) –∏–ª–∏ –Ω–∏—á–µ–≥–æ
            """
            pattern = r'<class \'__main__\.(.*?)\'>'
            match = search(pattern, str(error_class))
            return match.group(1) if match else None

        for method in self._methods:
            try:
                method(obj, params)
            except ValidationError as er:
                if self._handler is None:
                    en = _en(type(er))
                    msg = er.args[0]
                    print(self.E_INFO.format(en, msg))
                else:
                    self._handler(er, obj)

    def validate_with(self: T, **params: VParams) -> Callable:
        """
        ** –î–µ–∫–æ—Ä–∞—Ç–æ—Ä **

        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ –≤–∏–¥–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)

        :param params: –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        :return: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        def decorator(func: Callable) -> Callable:
            def wrapper(obj: VObject, *args: Args,
                        **kwargs: VParams) -> Callable:
                self.validate(obj, **params)
                return func(obj, *args, **kwargs)
            return wrapper
        return decorator
