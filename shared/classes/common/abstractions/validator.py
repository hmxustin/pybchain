"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
"""

from typing import Any, Dict, List, Callable, TypeAlias, Optional
from re import search

KWArgs: TypeAlias = Dict[str, Any]                                    # –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
VParams: TypeAlias = Optional[KWArgs]                                 # –ø—Å–µ–≤–¥–æ–Ω–∏–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –≤–∏–¥–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
VMethod: TypeAlias = Callable[[Any, VParams], None]                   # –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –º–µ—Ç–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
VMethods: TypeAlias = List[VMethod]                                   # –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
EHandler: TypeAlias = Optional[Callable[[Exception, Any], None]]      # –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫


class ValidationError(Exception):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    ...                                                               # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è


class Validator:
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä, —Å–ø–æ—Å–æ–±–Ω—ã–π –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –æ–±—ä–µ–∫—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (``obj``) —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ (``methods``), –ø–æ–¥–Ω–∏–º–∞—è
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á
    """
    def __init__(self, methods: VMethods, handler: EHandler = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        :param methods: —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
        :param handler: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        :return: ``None``
        """

        if not isinstance(methods, list):                             # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã methods –±—ã–ª —Å–ø–∏—Å–∫–æ–º; –∏–Ω–∞—á–µ, ...
            raise TypeError(f'–ü–∞—Ä–∞–º–µ—Ç—Ä methods –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º '
                            f'–º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '
                            f'—Ç–∏–ø methods ‚Äî {type(methods)}')         # ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        for method in methods:                                        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ method –≤ —Å–ø–∏—Å–∫–µ methods ...
            if not callable(method):                                  # ... –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –±—ã–ª –∏–º–µ–Ω–Ω–æ –º–µ—Ç–æ–¥–æ–º; –∏–Ω–∞—á–µ, ...
                raise TypeError(f'–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ methods '
                                f'–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥–æ–º (callable). '
                                f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø '
                                f'{type(method)}')                    # ... ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        if handler is not None and not callable(handler):             # –µ—Å–ª–∏ handler –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º –∏–ª–∏ None, —Ç–æ ...
            raise TypeError(f'–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (handler) '
                            f'–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥–æ–º (callable) –∏–ª–∏ '
                            f'None (–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏–ø handler '
                            f'‚Äî {type(handler)}')                     # ... –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        self._methods = methods                                       # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —Ü–∏–∫–ª–æ–º)
        self._handler = handler                                       # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

    def validate(self, obj: Any, **params: VParams) -> None:
        """
        –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –≤–∞–ª–∏–¥–∞—Ü–∏—è
        :param obj: –æ–±—ä–µ–∫—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        :param params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        :return: ``None`` (–≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–µ—Ç –ø–æ–¥–Ω—è—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
        """

        def _en(error_class: type[ValidationError]) -> str | None:
            """
            –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å "—á–∏—Å—Ç–æ–µ" –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç type

            :param error_class: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ type(ERROR)
            :return: —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è "—á–∏—Å—Ç–æ–µ" –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TypeError) –∏–ª–∏ –Ω–∏—á–µ–≥–æ
            """

            pattern = r'<class \'__main__\.(.*?)\'>'                  # –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏–∑ –µ–µ –∫–ª–∞—Å—Å–∞
            match = search(pattern, str(error_class))                 # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            return match.group(1) if match else None                  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–æ—Å—å

        for method in self._methods:                                  # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –º–µ—Ç–æ–¥–æ–≤, ...
            try:                                                      # ... –ø–æ–ø—ã—Ç–∞–µ–º—Å—è ...
                method(obj, params)                                   # ... ... –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –∫ –æ–±—ä–µ–∫—Ç—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            except ValidationError as er:                             # ... –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏, ...
                if self._handler is None:                             # ... ... –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏, ...
                    print(f'–û—à–∏–±–∫–∞ [üí•={_en(type(er))}] '
                          f'c c–æ–æ–±—â–µ–Ω–∏–µ–º [‚úâÔ∏è="{er.args[0]}"]. '
                          f'–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üö´')             # ... ... ... —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º
                else:                                                 # ... ... –∏–Ω–∞—á–µ, ...
                    self._handler(e, obj)                             # ... ... ... –≤—ã–ø–æ–ª–Ω–∏–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏

    def validate_with(self, **params: VParams) -> Callable:
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ –≤–∏–¥–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)

        :param params: –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        :return: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """

        def decorator(func):                                          # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
            def wrapper(obj, *args, **kwargs):                        # –º–µ—Ç–æ–¥-–æ–±–µ—Ä—Ç–∫–∞
                self.validate(obj, **params)                          # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                return func(obj, *args, **kwargs)                     # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
            return wrapper                                            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–µ—Ä—Ç–∫—É
        return decorator                                              # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä


def type_is_valid(obj: Any):
    actual_t = type(obj)
    if actual_t is not str:
        raise ValidationError(f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è '
                              f'{str} (—Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: '
                              f'{actual_t})', 0)


def length_is_valid(obj: Any, params: VParams):
    ln = len(obj)
    mx = params.get('max_length')
    if ln > mx:
        raise ValidationError(f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ ({ln}) '
                              f'–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é '
                              f'({mx})', 0)


def type_is_valid_handler(ex: Exception, obj: Any) -> None:
    if ex.args[1] == 0:
        intro = f'üí• –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ [{obj}]'
        raise ValueError(f'{intro} '
                         f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ -=[ {ex.args[0]} ]=-')
    else:
        raise Exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')


validator = Validator([type_is_valid, length_is_valid])


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏
@validator.validate_with(max_length=4)                                # noqa
def process_string(text):
    return text.upper()


# –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
try:
    result = process_string("hello")
    print(result)  # –í—ã–≤–µ–¥–µ—Ç: HELLO
except TypeError as e:
    print(f"–û—à–∏–±–∫–∞: {e}")

# –ü—Ä–∏–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏)
s = 11222
try:
    result = process_string(s)                                        # noqa
    print(result)
except TypeError as e:
    print(f"–û—à–∏–±–∫–∞: {e}")  # –í—ã–≤–µ–¥–µ—Ç: –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è <class 'str'> (—Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: <class 'int'>)
