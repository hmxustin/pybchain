from pytest import raises as _

from shared.classes.common.abstractions.validator import *
from inspect import signature
from typing import Optional


def method_is_positive(obj, params) -> bool:
    return obj > 0


def method_always_true(obj) -> bool:
    return True


def method_without_return(obj):
    ...


def testp_validator_initialization():

    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –µ–º—É —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø—Ä–∏—á–µ–º, –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–ª–µ–≤–∞
    —Ç–∏–ø–∞, –∞ —Å–∞–º —Å–ø–∏—Å–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º). –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –º–æ–∂–Ω–æ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
    """

    methods = [method_is_positive]
    validator = Validator(methods)

def testn_validator_initialization():
    """
    """

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
    # –í–∞—Ä–∏–∞–Ω—Ç 1. –ê—Ä–≥—É–º–µ–Ω—Ç methods –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º

    methods = 42
    with _(Exception):
        validator = Validator(methods)  # noqa - –Ω–∞–º–µ—Ä–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–¥–∏ —Ç–µ—Å—Ç–∞


"""
–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
–í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ methods.
–í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤.
–í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ç–æ–¥–∞.
–í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –º–µ—Ç–æ–¥–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–º –Ω–µ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
–í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –º–µ—Ç–æ–¥–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–º.
–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
–í—ã–∑–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–µ—Ç–æ–¥–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–º Optional[bool].


def test_validator_init_with_valid_methods():
    # –¢–µ—Å—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    methods = [is_positive]
    validator = Validator(methods)
    assert validator._methods == methods
    assert validator._handler is None

def test_validator_init_with_invalid_methods_type():
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeError –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ —Å–ø–∏—Å–∫–∞ –≤ –º–µ—Ç–æ–¥—ã
    with pytest.raises(TypeError):
        Validator(methods=is_positive)

def test_validator_init_with_empty_methods_list():
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeError –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤
    with pytest.raises(TypeError):
        Validator(methods=[])

def test_validator_init_with_non_callable_method():
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeError –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –º–µ—Ç–æ–¥–æ–≤
    with pytest.raises(TypeError):
        Validator(methods=[lambda x: x > 0, 5])

def test_validator_init_with_invalid_return_type():
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeError –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –º–µ—Ç–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º —Ç–∏–ø–æ–º
    def invalid_return_type(obj):
        return "not a bool"

    with pytest.raises(TypeError):
        Validator(methods=[invalid_return_type])

def test_validator_init_with_no_return_type():
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeError –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞
    def no_return_type(obj):
        pass

    with pytest.raises(TypeError):
        Validator(methods=[no_return_type])

def test_validator_init_with_valid_handler():
    # –¢–µ—Å—Ç –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫
    def handler(ex):
        print(ex)

    methods = [is_positive]
    validator = Validator(methods, handler)
    assert validator._methods == methods
    assert validator._handler == handler

def test_validator_init_with_invalid_handler():
    # –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TypeError –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    with pytest.raises(TypeError):
        Validator(methods=[is_positive], handler="not callable")
        
        
def test_init_with_valid_methods(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–µ—Ç–æ–¥–æ–≤

    def method1(obj): return True

    def method2(obj): return True

    validator = Validator([method1, method2])
    self.assertEqual(validator._methods, [method1, method2])


def test_init_with_empty_methods(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –º–µ—Ç–æ–¥–æ–≤

    validator = Validator([])
    self.assertEqual(validator._methods, [])


def test_init_with_invalid_methods_type(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞ methods

    with self.assertRaises(TypeError):
        Validator("not a list")


def test_init_with_non_callable_method(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –≤ —Å–ø–∏—Å–∫–µ methods

    with self.assertRaises(TypeError):
        Validator([lambda x: x, "not a function"])


def test_init_with_valid_handler(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫


    def handler(e): return "Error handled"

    validator = Validator([], handler)
    self.assertEqual(validator._handler, handler)


def test_init_with_none_handler(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –æ—à–∏–±–æ–∫ —Ä–∞–≤–Ω—ã–º None

    validator = Validator([])
    self.assertIsNone(validator._handler)


def test_init_with_invalid_handler_type(self):
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫

    with self.assertRaises(TypeError):
        Validator([], "not a function")


def type_is_valid(obj: Any):
    actual_t = type(obj)
    if actual_t is not str:
        raise ValidationError(f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è '
                              f'{str} (—Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: '
                              f'{actual_t})', 0)


def length_is_valid(obj: Any, params: VParams):
    ln = len(obj)
    mx = params.get('max_length')
    if ln > mx:
        raise ValidationError(f'–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ ({ln}) '
                              f'–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é '
                              f'({mx})', 0)


def type_is_valid_handler(ex: Exception, obj: Any) -> None:
    if ex.args[1] == 0:
        intro = f'üí• –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ [{obj}]'
        raise ValueError(f'{intro} '
                         f'–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ -=[ {ex.args[0]} ]=-')
    else:
        raise Exception('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')


validator = Validator([type_is_valid, length_is_valid])


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏
@validator.validate_with(max_length=4)                                # noqa
def process_string(text):
    return text.upper()


# –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
try:
    result = process_string("hello")
    print(result)  # –í—ã–≤–µ–¥–µ—Ç: HELLO
except TypeError as e:
    print(f"–û—à–∏–±–∫–∞: {e}")

# –ü—Ä–∏–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏)
s = 11222
try:
    result = process_string(s)                                        # noqa
    print(result)
except TypeError as e:
    print(f"–û—à–∏–±–∫–∞: {e}")  # –í—ã–≤–µ–¥–µ—Ç: –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è <class 'str'> (—Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: <class 'int'>)
"""
